{"version":3,"sources":["Button.tsx","DisplayTimer.tsx","DisplayLap.tsx","Controller.tsx","App.tsx","index.ts"],"names":["Button","props","React","createElement","TouchableOpacity","onPress","onClick","Text","label","DisplayTimer","padTime","value","toString","padStart","View","time","millisecond","Math","floor","seconds","minutes","hours","concat","formatTime","DisplayLap","laps","map","lap","index","key","Controller","_useState","useState","_useState2","_slicedToArray","timer","setTimer","_useState3","setIsRunning","_useState5","_useState6","startTime","setStartTime","_useState7","setStopTime","_useState9","_useState10","setLaps","timerRef","useRef","useEffect","current","setInterval","Date","now","clearInterval","undefined","prevLaps","_toConsumableArray","App","AppRegistry","registerComponent","runApplication","rootTag","document","getElementById"],"mappings":"wPAQe,SAASA,EAAOC,GAC7B,OACEC,IAAAC,cAACC,IAAgB,CAACC,QAASJ,EAAMK,SAC/BJ,IAAAC,cAACI,IAAI,KAAEN,EAAMO,QCHJ,SAASC,EAAaR,GAEnC,IAAMS,EAAU,SAACC,GACf,OAAOA,EAAMC,WAAWC,SAAS,EAAG,MAetC,OACEX,IAAAC,cAACW,IAAI,KACHZ,IAAAC,cAACI,IAAI,KAdU,SAACQ,GAElB,IAAMC,EAAcC,KAAKC,MAAOH,EAAO,IAAQ,IACzCI,EAAUF,KAAKC,MAAMH,EAAO,KAAQ,GACpCK,EAAUH,KAAKC,MAAMC,EAAU,IAAM,GACrCE,EAAQJ,KAAKC,MAAME,EAAU,IAEnC,MAAM,GAANE,OAAUZ,EAAQW,GAAM,KAAAC,OAAIZ,EAAQU,GAAQ,KAAAE,OAAIZ,EAAQS,GAAQ,KAAAG,OAAIZ,EAClEM,IAMOO,CAAWtB,EAAMc,QCpBf,SAASS,EAAWvB,GACjC,OACEC,IAAAC,cAACW,IAAI,KAEFb,EAAMwB,KAAKC,KAAI,SAACC,EAAKC,GAAK,OACzB1B,IAAAC,cAACI,IAAI,CAACsB,IAAKD,GAAQD,EAAM,IAAK,gBCPvB,SAASG,IAEtB,IAAAC,EAA0BC,mBAAiB,GAAEC,EAAAC,YAAAH,EAAA,GAAtCI,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAGtBI,EAAyBL,oBAAkB,GAAlCM,EAAwCJ,YAAAG,EAAA,GAA5B,GAGrBE,EAAkCP,mBAAiB,GAAEQ,EAAAN,YAAAK,EAAA,GAA9CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,GAG9BG,EAAwBX,mBAAiB,GAAhCY,EAAkCV,YAAAS,EAAA,GAAvB,GAGpBE,EAAwBb,mBAAmB,IAAGc,EAAAZ,YAAAW,EAAA,GAAvCpB,EAAIqB,EAAA,GAAEC,EAAOD,EAAA,GAGdE,EAAWC,mBAGjBC,qBAAU,WACJT,EAAY,EACdO,EAASG,QAAUC,aAAY,WAE7BhB,GAAS,kBAAMiB,KAAKC,MAAQb,OAC3B,GAGCO,EAASG,UACXI,cAAcP,EAASG,SACvBH,EAASG,aAAUK,KAGtB,CAACf,IAgCJ,OACEvC,IAAAC,cAACW,IAAI,KACHZ,IAAAC,cAACM,EAAY,CAACM,KAAMoB,IACpBjC,IAAAC,cAACH,EAAM,CAACQ,MAAM,QAAQF,QAjCP,WAEjBgC,GAAa,GAEbI,EAAaW,KAAKC,UA8BhBpD,IAAAC,cAACH,EAAM,CAACQ,MAAM,QAAQF,QA3BP,WAEjBgC,GAAa,GACbI,EAAa,GAEbE,EAAYT,MAuBVjC,IAAAC,cAACH,EAAM,CAACQ,MAAM,QAAQF,QApBP,WAEjBgC,GAAa,GACbI,EAAa,GACbE,EAAY,GACZR,EAAS,GAETW,EAAQ,OAcN7C,IAAAC,cAACH,EAAM,CAACQ,MAAM,UAAUF,QAXb,WAEbyC,GAAQ,SAACU,GAAQ,SAAAnC,OAAAoC,YAASD,GAAQ,CAAEtB,UAUlCjC,IAAAC,cAACqB,EAAU,CAACC,KAAMA,KCzET,SAASkC,IACtB,OACEzD,IAAAC,cAACW,IAAI,KACHZ,IAAAC,cAAA,UAAI,aACJD,IAAAC,cAAC2B,EAAU,OCNjB8B,IAAYC,kBAAkB,OAAO,kBAAMF,KAE3CC,IAAYE,eAAe,MAAO,CAChCC,QAASC,SAASC,eAAe,Y","file":"static/js/main.9835363e.chunk.js","sourcesContent":["import React from \"react\";\nimport { TouchableOpacity, Text } from \"react-native\";\n\ntype ButtonProps = {\n  label: string;\n  onClick: () => void;\n};\n\nexport default function Button(props: ButtonProps) {\n  return (\n    <TouchableOpacity onPress={props.onClick}>\n      <Text>{props.label}</Text>\n    </TouchableOpacity>\n  );\n}\n","import React from \"react\";\nimport { Text, View } from \"react-native\";\n\n// Define the type for the props that the component receives\ntype DisplayTimerProps = {\n  time: number;\n};\n\nexport default function DisplayTimer(props: DisplayTimerProps) {\n  // Function to pad a given number with leading zeros\n  const padTime = (value: number): string => {\n    return value.toString().padStart(2, \"0\");\n  };\n\n  const formatTime = (time: number): string => {\n    // Calculate the milliseconds, seconds, minutes, and hours from the given time\n    const millisecond = Math.floor((time % 1000) / 10);\n    const seconds = Math.floor(time / 1000) % 60;\n    const minutes = Math.floor(seconds / 60) % 60;\n    const hours = Math.floor(minutes / 60);\n\n    return `${padTime(hours)}:${padTime(minutes)}:${padTime(seconds)}.${padTime(\n      millisecond\n    )}`;\n  };\n\n  return (\n    <View>\n      <Text>{formatTime(props.time)}</Text>\n    </View>\n  );\n}\n","import React from \"react\";\nimport { View, Text } from \"react-native\";\n\n// Define the type for the props that the component receives\ntype DisplayLapProps = {\n  laps: number[];\n};\n\nexport default function DisplayLap(props: DisplayLapProps) {\n  return (\n    <View>\n      {/* Map through the laps array and render each lap time */}\n      {props.laps.map((lap, index) => (\n        <Text key={index}>{lap / 1000} seconds</Text>\n      ))}\n    </View>\n  );\n}\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { View } from \"react-native\";\nimport Button from \"./Button\";\nimport DisplayTimer from \"./DisplayTimer\";\nimport DisplayLap from \"./DisplayLap\";\n\nexport default function Controller() {\n  // State variable for timer value\n  const [timer, setTimer] = useState<number>(0);\n\n  // State variable for timer running status\n  const [, setIsRunning] = useState<boolean>(false);\n\n  // State variable for start time\n  const [startTime, setStartTime] = useState<number>(0);\n\n  // State variable for stop time\n  const [, setStopTime] = useState<number>(0);\n\n  // State variable for lap times\n  const [laps, setLaps] = useState<number[]>([]);\n\n  // Ref to store the interval ID\n  const timerRef = useRef<ReturnType<typeof setInterval>>();\n\n  // Effect to start or stop the timer based on start time\n  useEffect(() => {\n    if (startTime > 0) {\n      timerRef.current = setInterval(() => {\n        // Update the timer value as the difference between current time and start time\n        setTimer(() => Date.now() - startTime);\n      }, 1);\n    } else {\n      // If start time is 0, stop the timer\n      if (timerRef.current) {\n        clearInterval(timerRef.current);\n        timerRef.current = undefined;\n      }\n    }\n  }, [startTime]);\n\n  const startTimer = () => {\n    // Set the timer running status to true\n    setIsRunning(true);\n    // Set the start time to the current time\n    setStartTime(Date.now());\n  };\n\n  const pauseTimer = () => {\n    // Set the timer running status to false\n    setIsRunning(false);\n    setStartTime(0);\n    // Set the stop time to the current timer value\n    setStopTime(timer);\n  };\n\n  const resetTimer = () => {\n    // Reset everything to 0\n    setIsRunning(false);\n    setStartTime(0);\n    setStopTime(0);\n    setTimer(0);\n    // Clear lap times\n    setLaps([]);\n  };\n\n  const newLap = () => {\n    // Set the current timer value as a new lap\n    setLaps((prevLaps) => [...prevLaps, timer]);\n  };\n\n  return (\n    <View>\n      <DisplayTimer time={timer} />\n      <Button label=\"Start\" onClick={startTimer} />\n      <Button label=\"Pause\" onClick={pauseTimer} />\n      <Button label=\"Reset\" onClick={resetTimer} />\n      <Button label=\"New Lap\" onClick={newLap} />\n      <DisplayLap laps={laps} />\n    </View>\n  );\n}\n","import React, { Component } from \"react\";\nimport { View } from \"react-native\";\n\nimport Controller from \"./Controller\";\n\nexport default function App() {\n  return (\n    <View>\n      <h1>Stopwatch</h1>\n      <Controller />\n    </View>\n  );\n}\n","import { AppRegistry } from \"react-native\";\nimport App from \"./App\";\n\nAppRegistry.registerComponent(\"App\", () => App);\n\nAppRegistry.runApplication(\"App\", {\n  rootTag: document.getElementById(\"root\")\n});\n"],"sourceRoot":""}